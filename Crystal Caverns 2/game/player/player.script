local data = require "main.data"

local DRAG = 0.1
local ACCEL = 0.3
local SPEED_MAX = 1.2
local FALL_MAX = 4.0
local GRAVITY = 0.2
local JUMP = 3.1
local BOUNCE = 0.5
local ONGROUND = 10
local INVUL = 100
local INPUT_LOCK = 40
local BREATH = 0.002
local TRAMP = 5.6

local function invulnerable(self)
	self.invul = INVUL
end	

function init(self)
	msg.post(".", "acquire_input_focus")
	self.correction = vmath.vector3()
	self.move = vmath.vector3()
	self.dir = vmath.vector3(1,0,0)
	self.anim = vmath.vector3()
	self.throw = vmath.vector3()
	self.shove = vmath.vector3()
	self.power = 120
	self.lock = 0
	self.onground = 0
	self.invul = 0
	self.portal = 0
	self.dust = false
	self.snap = true
	self.water = false
	self.bubbles = false
	self.double = false
	self.bossroom = nil

	invulnerable(self)
	sound.play("main:/sound#lift", {gain = 0})
	sound.play("main:/sound#music-game", {gain = 0.6})

	msg.post("view#game", "status", {text = "AREA "..tostring(data.level)})

	data.state = data.STATE_PLAYING
end

local function move(self)
	local water = 1
	if self.water then water = 2 end
	local pos = go.get_position() + (self.move / water) + self.shove
	pos.z = -0.1
	go.set_position(pos)
	data.playerpos = pos
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function gravity(self)
	self.move.y = self.move.y - GRAVITY
	if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
end

local function gameover(self)
	self.lock = INPUT_LOCK
	msg.post("#co", "disable")
	msg.post("#sprite", "disable")
	msg.post("view#gameover", "show")
end

local function hurt(self)
	if self.invul == 0 then
		data.hp = data.hp - 1
		sound.play("main:/sound#hit")
		invulnerable(self)
		if data.hp == 0 then
			data.hp = 5
			go.set_position(data.respawn + vmath.vector3(data.TILE_SIZE, 0, 0))
			self.move = vmath.vector3()
			msg.post("view#script", "slow")
			msg.post("view#script", "unlock")
			msg.post("/boss", "reset")
			msg.post(self.bossroom, "reset")
		end
	end
end

local function tilecheck(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "top", pos.x, pos.y)
	if t >=3 and t <= 5 then
		tilemap.set_tile("/level#tilemap", "top", pos.x, pos.y, 0)
		sound.play("main:/sound#pickup")
		msg.post("/common/effect", "gem", {pos = data.tile2world(pos)})
		data.gems = data.gems + 1
	elseif t == 10 then
		self.onground = 0
		self.move.y = TRAMP
		sound.play("main:/sound#spring")
	elseif t == 17 and data.hp < 5 then
		data.hp = data.hp + 1
		tilemap.set_tile("/level#tilemap", "top", pos.x, pos.y, 0)
		msg.post("view#game", "status", {text = "PICKED UP A HEART!"})
		sound.play("main:/sound#heart")
	elseif t >= 34 and t <= 36 then
		tilemap.set_tile("/level#tilemap", "top", pos.x, pos.y, t + 3)
		local num = t-33
		data.key[num] = true
		sound.play("main:/sound#switch")
		local color = {"BLUE","GREEN","RED"}
		local text = color[num].." DOOR UNLOCKED"
		msg.post("view#game", "status", {text = text})
	elseif t == 44 then
		tilemap.set_tile("/level#tilemap", "top", pos.x, pos.y, 0)
		data.boom = data.boom + 1
		msg.post("view#game", "status", {text = "EXTRA BOOMERANG!"})
		sound.play("main:/sound#heart")

	elseif t == 28 then
		data.o2 = data.o2 - BREATH
		if data.o2 <= 0 then
			data.o2 = 0
			hurt(self)
		end
		if not self.water then
			self.water = true
			particlefx.play("#splash")
			sound.play("main:/sound#splash")
		end
	else
		data.o2 = 1
		self.water = false
	end
end

local function cond(self)
	if self.onground > 0 then self.onground = self.onground - 1 end

	if data.hearts == 0 then
		self.lock = INPUT_LOCK
		msg.post("#co", "disable")
		msg.post("gui#gameover", "show")
		particlefx.stop("#dust")
	end
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul == 0 then
			--
		elseif self.invul % 6 < 3 then sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
		else sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0))
		end
	end
end

local function anim(self)
	if self.onground == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	elseif self.move.x ~= 0 and self.dir.x ~= self.anim.x then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", true)
			self.anim.x = -1
		else
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", false)
			self.anim.x = 1
		end
	elseif self.move.x == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	end
end

local function particles(self)
	if self.onground > 0 and not self.dust and self.move.x ~= 0 and not self.water then
		self.dust = true
		particlefx.play("#dust")
	elseif (self.onground == 0 and self.dust) or self.move.x == 0 or self.water then
		self.dust = false
		particlefx.stop("#dust")
		
	end

	if self.water and not self.bubbles then
		self.bubbles = true
		particlefx.play("#bubbles")
	elseif not self.water and self.bubbles then
		self.bubbles = false
		particlefx.stop("#bubbles")
	end
end

local function cam(self)
	if self.snap then
		msg.post("view#script", "snap_to", {position = go.get_position()})
		self.snap = false
	else	
		msg.post("view#script", "look_at", {position = go.get_position()})
	end
end

local function throw(self)
	if data.boom > 0 and not self.water and self.throw.z == 1 then
		self.throw.z = 0
		if vmath.length(self.throw) == 0 then self.throw = self.dir end
		local v = vmath.normalize(self.throw)
		factory.create("#boom_factory", nil, nil, {move = v * self.power})
		sound.play("main:/sound#throw")
		data.boom = data.boom - 1
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		cam(self)
		drag(self)
		gravity(self)
		tilecheck(self)
		cond(self)
		anim(self)
		particles(self)
		flash(self)
		throw(self)
	end

	self.correction = vmath.vector3()
	self.throw = vmath.vector3()
	self.shove = vmath.vector3()
	if self.lock > 0 then self.lock = self.lock - 1 end
end

local function portal(self)
	local pos = data.portal[2]
	if self.portal == 2 then pos = data.portal[1] end
	go.set_position(pos)
	data.respawn = pos + vmath.vector3(-data.TILE_SIZE, 0, 0)
	msg.post("view#script", "snap_to", {position = pos})
	msg.post("view#shutter", "reset")
	sound.play("main:/sound#portal")
end

local function jump(self)
	if self.onground > 0 or self.double then
		if self.onground == 0 then self.double = false end
		self.move.y = JUMP
		self.onground = 0
		if not self.water then sound.play("main:/sound#jump") end
	end
end

local function levelclear(self)
	msg.post("/common/view#clear", "show")
	msg.post("#sprite", "play_animation", {id = hash("static")})
	particlefx.stop("#dust")
end

local function exitgame(self)
	msg.post("main:/sound", "stop_sound", {})
	msg.post("main:/handler", "show_menu")
end

local function nextlevel(self)
	self.lock = INPUT_LOCK
	data.level = data.level + 1
	if data.level > data.MAX_LEVELS then
		data.maxlevel = 1
		exitgame(self)
	else
		msg.post("game:/loader", "new_level", {})
		data.maxlevel = data.level
	end
end

local function input_playing (self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
		self.dir.x = -1
		self.throw.x = -1
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
		self.dir.x = 1
		self.throw.x = 1
	elseif action_id == hash("up") then
		if action.pressed and self.portal > 0 then portal(self) end
		self.throw.y = 1
	elseif action_id == hash("action") and action.pressed then
		jump(self)
	elseif action_id == hash("throw") and action.pressed then
		self.throw.z = 1
	elseif action_id == hash("exit") and action.pressed then
		exitgame(self)
	elseif action_id == hash("debug") and action.pressed then
		--levelclear(self)
	end
end

local function input_clear(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("throw")) and action.pressed then
		sound.stop("main:/sound#music-clear")
		nextlevel(self)
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return end

	if data.state == data.STATE_PLAYING then
		input_playing (self, action_id, action)
	elseif data.state == data.STATE_CLEAR then
		input_clear(self, action_id, action)
	end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
			if math.abs(message.normal.x) == 1 then self.move.x = 0 end
			if message.normal.y > 0.5 then
				if self.move.y < -2 and not self.water then sound.play("main:/sound#land") end
				self.move.y = 0
				self.onground = ONGROUND
				self.double = true
			elseif message.normal.y < -0.5 then self.move.y = -BOUNCE
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("enemy") then
			hurt(self)
		elseif message.other_group ~= hash("boom") then
			collision(self, message)
		end
	elseif message_id == hash("position") then
		go.set_position(message.pos)
		data.respawn = message.pos
		self.dir.x = message.dir
	elseif message_id == hash("hurt") then
		hurt(self)
	elseif message_id == hash("move") then
		self.shove = message.move
	elseif message_id == hash("portal") then
		if message.enter then self.portal = message.num
		elseif self.portal == message.num then self.portal = 0
		end
	elseif message_id == hash("bossroom") then
		self.bossroom = sender
	elseif message_id == hash("levelclear") then
		levelclear(self)
	end
end
