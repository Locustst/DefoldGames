local data = require "main.data"

local DAMAGE = 2
local TIME = 1.3
local GRAVITY = 0.2
local FALL_MAX = 4.0
local JUMP = 5.5
local DROP = 30

local function reset(self)
	self.on = false
	self.flash = 0
	self.time = 0
	self.drop = 0
	self.origin = vmath.vector3()
	self.move = vmath.vector3(2,0,0)
	self.correction = vmath.vector3()
	data.bosshp = 100
	msg.post("#sprite", "disable")
	msg.post("#co", "disable")
	sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0))
end

function init(self)
	reset(self)
end

local function gravity(self)
	self.move.y = self.move.y - GRAVITY
	if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
end

local function move(self)
	local pos = go.get_position()
	pos = pos + self.move
	if self.origin.y - pos.y > 41 then
		pos.y = self.origin.y - 41
		self.move = vmath.vector3()
	end
	go.set_position(pos)
end

local function jump(self)
	self.move.y = JUMP
	self.time = 0
	local pos = go.get_position()
	if pos.x > self.origin.x then self.move.x = math.random(-18,-10) / 10
	else self.move.x = math.random(10,18) / 10
	end
end

local function shoot(self)
	self.drop = self.drop + 1
	if self.drop > DROP then
		self.drop = 0
		local pos = go.get_position()
		if pos.y > self.origin.y then
			local pos = go.get_position()
			pos.z = pos.z - 0.1
			pos.y = pos.y - 14
			local move = data.playerpos - pos
			move = vmath.normalize(move)
			factory.create("#bullet-factory", pos, nil, {move = move})
		end
	end
end

local function deaddrop(self, url, property)
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.origin.y - 200, go.EASING_INSINE, 1)
end

function update(self, dt)
	if self.on then
		move(self)
		gravity(self)
		shoot(self)
		self.time = self.time + dt
		if self.time > TIME then
			jump(self)
		end

		if self.flash == 2 then
			sprite.set_constant("#sprite", "tint", vmath.vector4(8,8,8,1))
			self.flash = 1
		elseif self.flash == 1 then
			sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
			self.flash = 0
		end
	elseif data.bosshp <= 0 then
		self.time = self.time + 1
		if data.state == data.STATE_PLAYING and (self.time % 10) == 1 then
			msg.post("/common/effect", "explode", {pos = go.get_position() + vmath.vector3(math.random(-16,16), math.random(-16,16), 0)})
		end
	end
end

local function endlevel(self, url, property)
	msg.post("/common/player", "levelclear")
end

local function hurt(self)
	data.bosshp = data.bosshp - DAMAGE
	self.flash = 2
	if data.bosshp <= 0 then
		data.bosshp = 0
		self.on = false
		self.time = 0
		msg.post("#co", "disable")
		go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 2, 0, endlevel)
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.origin.y + 40, go.EASING_OUTSINE, 1, 0, deaddrop)
		particlefx.play("#pfx")
	end
end

local function activated(self, url, property)
	self.on = true
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("boom") and self.on then
			hurt(self)
		end
	elseif message_id == hash("activate") then
		self.origin = message.pos
		go.set_position(message.pos)
		msg.post("#sprite", "enable")
		msg.post("#co", "enable")
		go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 1, 0.5, activated)
		sound.play("main:/sound#boss")
	elseif message_id == hash("reset") then
		reset(self)
	end
end

