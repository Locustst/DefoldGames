local data = require "main.data"

local function fsmenutext(self)
	local text = ""
	if defos.is_fullscreen() then
		text = "WINDOWED"
		defos.set_cursor_visible(false)
	else
		text = "FULLSCREEN"
		defos.set_cursor_visible(true)
	end
	gui.set_text(gui.get_node("3"), text)
end

local function disablenode(self, node)
	gui.set_enabled(node, false)
end

function init(self)
	self.handpos = 1
	self.rad = 0
	self.arrowpos = {
		gui.get_position(gui.get_node("1")),
		gui.get_position(gui.get_node("2")),
		gui.get_position(gui.get_node("3")),
		gui.get_position(gui.get_node("4")),
		gui.get_position(gui.get_node("5")),
	}
	msg.post(".", "acquire_input_focus")
	self.node = gui.get_node("container")
	if data.maxlevel > 1 then gui.set_text(gui.get_node("1"), string.format("CONTINUE (%d)", data.maxlevel)) end
	fsmenutext(self)
	gui.set_position(self.node, vmath.vector3(data.SCR_W/2, (data.SCR_H/2), 0))
	gui.play_particlefx(gui.get_node("sparkle"))

	local node = gui.get_node("shutter")
	local col = gui.get_color(node)
	col.w = 0
	gui.animate(node, gui.PROP_COLOR, col, gui.EASING_LINEAR, 0.5, 0, disablenode)

	sound.play("main:/sound#music-menu")
	data.state = data.STATE_MENU
end

local function startgame(self, node)
	data.hp = 5
	data.o2 = 1
	data.boom = data.maxlevel
	data.level = data.maxlevel
	data.state = data.STATE_PLAYING
	sound.stop("main:/sound#music-menu")
	msg.post("main:/handler", "show_game")
end	

local function show(self)
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(data.SCR_W/2, data.SCR_H/2, 0), gui.EASING_INOUTQUAD, 0.25)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,1), gui.EASING_INOUTQUAD, 0.25)
	data.state = data.STATE_MENU
end

local function hide(self)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(data.SCR_W/2, (data.SCR_H/2) - data.GUI_DROP, 0), gui.EASING_INOUTQUAD, 0.25, 0, disablenode)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INOUTQUAD, 0.25)
end

function update(self, dt)
	if data.state == data.STATE_MENU then
		self.rad = self.rad + 0.1
		local sin = math.sin(self.rad) * 16
		local pos = vmath.vector3(self.arrowpos[self.handpos].x - 90 - sin, self.arrowpos[self.handpos].y - 12, 0)
		gui.set_position(gui.get_node("arrow"), pos)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(self)
	end
end

local function controls(self)
	hide(self)
	msg.post("#controls", "show", {})
end

local function credits(self)
	hide(self)
	msg.post("#credits", "show", {})
end

local function fullscreen(self)
	defos.toggle_fullscreen()
	defos.disable_window_resize()
	defos.disable_maximize_button()
	fsmenutext(self)
	--sound.play("main:/sound#hit")
end

function on_input(self, action_id, action)
	if data.state == data.STATE_MENU then
		if action_id == hash("up") and action.pressed then
			self.handpos = self.handpos - 1
			if self.handpos < 1 then self.handpos = 5 end
			sound.play("main:/sound#tick")
		elseif action_id == hash("down") and action.pressed then
			self.handpos = self.handpos + 1
			if self.handpos > 5 then self.handpos = 1 end
			sound.play("main:/sound#tick")
		elseif action_id == hash("action") and action.pressed then
			if self.handpos == 1 then
				local node = gui.get_node("shutter")
				local col = gui.get_color(node)
				col.w = 1.1
				gui.set_enabled(node, true)
				gui.animate(node, gui.PROP_COLOR, col, gui.EASING_LINEAR, 0.5, 0, startgame)
				sound.play("main:/sound#chirp")
			elseif self.handpos == 2 then
				controls(self)
				sound.play("main:/sound#chirp")
			elseif self.handpos == 3 then
				fullscreen(self)
				sound.play("main:/sound#chirp")
			elseif self.handpos == 4 then
				credits(self)
				sound.play("main:/sound#chirp")
			elseif self.handpos == 5 then
				msg.post("@system:", "exit", {code = 0})
			end
		elseif action_id == hash("exit") and action.pressed then
			msg.post("@system:", "exit", {code = 0})
		end
	end
end


