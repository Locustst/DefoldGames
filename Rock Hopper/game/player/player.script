local data = require "main.data"

local DRAG = 0.1
local ACCEL = 0.3
local SPEED_MAX = 0.8
local ONGROUND = 8
local MIN = -4
local JUMP = 3
local GRAV = 0.2
local BOUNCE = 0.2
local DEAD_TIME = 100
local INVUL = 100
local LOCK = 50

local function invul(self)
	self.invul = INVUL
end

function init(self)
	self.snap = true
	self.inpipe = false
	self.time = 0
	self.lock = 0
	self.invul = INVUL
	self.onground = ONGROUND
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
	self.dir = vmath.vector3(1,0,0)
	self.anim = vmath.vector3()
	msg.post(".", "acquire_input_focus")
	data.state = data.STATE_PLAYING
	sound.play("main:/sound#music")
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function restart(self)
	msg.post("game:/loader", "reload_level")
end

local function move(self)
	local move = self.move
	move.z = 0
	local pos = go.get_position() + move
	pos.z = 0.1
	go.set_position(pos)
	data.playerpos = pos
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end

	if self.inpipe then
		if self.move.y > 0 then self.move.y = self.move.y - DRAG
			if self.move.y < 0 then self.move.y = 0 end
		elseif self.move.y < 0 then self.move.y = self.move.y + DRAG
			if self.move.y > 0 then self.move.y = 0 end
		end
	end
end

local function grav(self)
	if not self.inpipe then
		self.move.y = self.move.y - GRAV
		if self.move.y < MIN then self.move.y = MIN end
	end
end

local function anim(self)
	if self.onground == 0 and not self.inpipe then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	elseif self.move.x ~= 0 and self.dir.x ~= self.anim.x then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", true)
			self.anim.x = -1
		else
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", false)
			self.anim.x = 1
		end
	elseif self.move.x == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	end
end

local function pause(self)
	self.anim = vmath.vector3(0,0,0)
	msg.post("#sprite", "play_animation", {id = hash("static")})
	particlefx.stop("#dust")
end

local function contact(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t >= 35 and t <= 80 then
		self.inpipe = true
	else
		self.inpipe = false
	end

	if t == 15 or t == 16 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		local s = tilemap.get_tile("/level#tilemap", "top", pos.x, pos.y)
		sound.play("main:/sound#beep")
		if s > 0 then
			msg.post("view#game", "status", {text = "FOUND A HIDDEN CRYSTAL"})
			data.secrets = data.secrets + 1
		else
			msg.post("view#game", "status", {text = "COLLECTED A CRYSTAL"})
		end
		
		data.gems = data.gems + 1 
	elseif t == 28 then
		pause(self)
		self.move = vmath.vector3(0,0,0)
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		msg.post("view#message", "show", {id = 3})
		msg.post("view#game", "tracker")
		sound.play("main:/sound#special")
		data.tracker = true
	elseif t >= 218 and t <= 221 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		msg.post("view#game", "status", {text = "FOUND A SPECIAL ARTEFACT"})
		msg.post("view#game", "art", {id = t-217})
		sound.play("main:/sound#special")
	end
end

local function dust(self)
	if self.onground > 0 and not self.dust and self.move.x ~= 0 then
		self.dust = true
		particlefx.play("#dust")
	elseif (self.onground == 0 and self.dust) or self.move.x == 0 then
		self.dust = false
		particlefx.stop("#dust")
	end
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul == 0 then
			msg.post("#co", "enable")
		elseif self.invul % 6 < 3 then
			msg.post("#sprite", "enable")
		else
			msg.post("#sprite", "disable")
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		contact(self)
		move(self)
		dust(self)
		drag(self)
		grav(self)
		anim(self)
		flash(self)
		
		if self.onground > 0 then self.onground = self.onground - 1 end

		data.time = data.time - dt
		data.timetotal = data.timetotal + dt

		if data.time < 0 then
			data.time = 0
			msg.post("view#game", "status", {text = "OUT OF TIME"})
			msg.post("view#rank", "show")
			sound.stop("main:/sound")
			sound.play("main:/sound#fail")
		end
		
		self.correction = vmath.vector3()
	end

	if self.lock > 0 then self.lock = self.lock - 1 end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp

			if math.abs(message.normal.x) == 1 then self.move.x = 0 end
			if message.normal.y > 0.5 then
				--if self.move.y < -200 then sound.play("main:/sound#land", {gain = 0.4}) end
				self.move.y = 0
				self.onground = ONGROUND
			elseif message.normal.y < -0.8 then
				self.move.y = -BOUNCE
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
		data.spawnpos = message.pos
	elseif message_id == hash("contact_point_response") and 
		data.state == data.STATE_PLAYING and 
		message.other_group ~= hash("rocket") then
		collision(self, message)
	elseif message_id == hash("teleport") then
		particlefx.play("#pfx")
		sound.play("main:/sound#teleport")
		msg.post("#sprite", "disable")
	end
end

local function up(self)
	self.move.y = self.move.y + ACCEL
	if self.move.y > SPEED_MAX then self.move.y = SPEED_MAX end
	self.dir.y = 1
end

local function jump(self, pressed)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t == 213 and pressed then
		pause(self)
		msg.post("view#map", "show")
		sound.play("main:/sound#ping")
	elseif t >= 17 and t <= 20 and pressed then
		pause(self)
		msg.post("view#message", "show", {id = t - 16})
		sound.play("main:/sound#ping")
	elseif self.onground > 0 and pressed then
		self.move.y = JUMP
		self.onground = 0
		sound.play("main:/sound#jump")
	elseif self.inpipe then
		up(self)
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
		self.dir.x = 1
	elseif action_id == hash("down") and self.inpipe then
		self.move.y = self.move.y - ACCEL
		if self.move.y < -SPEED_MAX then self.move.y = -SPEED_MAX end
		self.dir.y = -1
	elseif action_id == hash("up") and self.inpipe then
		up(self)
	elseif action_id == hash("action") then
		jump(self, action.pressed)
	elseif action_id == hash("tracker") and action.pressed and data.tracker then
		msg.post("tracker", "show")
	elseif action_id == hash("exit") and action.pressed then
		quit2menu(self)
	elseif action_id == hash("debug") and action.pressed then
		
	end
end

local function input_gameover(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("exit")) and action.pressed then
		quit2menu(self)
	end
end

local function input_map(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("exit")) and action.pressed then
		msg.post("view#map", "hide")
		data.state = data.STATE_PLAYING
	end
end

local function input_msg(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("exit")) and action.pressed then
		msg.post("view#message", "hide")
		data.state = data.STATE_PLAYING
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return end

	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	elseif data.state == data.STATE_MAP then
		input_map(self, action_id, action)
	elseif data.state == data.STATE_MSG then
		input_msg(self, action_id, action)
	end
end
