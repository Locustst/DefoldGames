local data = require "main.data"

local DRAG = 0.1
local ACCEL = 0.2
local SPEED_MAX = 1
local FALL_MAX = 3.0
local GRAVITY = 0.13
local FLOAT = 0.1
local JUMP = 3.2
local BOUNCE = 0.5
local SHOT_SPEED = 30000
local LADDER_SPEED = 0.75
local ONGROUND = 10
local INVUL = 100
local INPUT_LOCK = 40

local function invulnerable(self)
	self.invul = INVUL
end	

function init(self)
	msg.post(".", "acquire_input_focus")
	self.correction = vmath.vector3()
	self.move = vmath.vector3()
	self.dir = vmath.vector3(1,0,0)
	self.anim = vmath.vector3(0,0,0)
	self.lock = 0
	self.onground = 0
	self.invul = 0
	self.dust = false
	self.ladder = false

	invulnerable(self)

	data.state = data.STATE_PLAYING
end

local function move(self)
	local pos = go.get_position() + self.move
	go.set_position(pos)
	data.playerpos = pos
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function gravity(self)
	self.move.y = self.move.y - GRAVITY
	if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
end

local function pickup(self, type)
end

local function hurt(self)
	if self.invul == 0 then
		data.hearts = data.hearts - 1
		sound.play("main:/sound#hit")
		invulnerable(self)
	end
end

local function endlevel(self)
	self.lock = INPUT_LOCK
	data.level = data.level + 1
	msg.post("#sprite", "disable")
	if data.level >=3 then
		msg.post("/common/gui#complete", "show", {})
		data.maxlevel = 1
	else
		msg.post("game:/loader", "new_level", {})
		data.maxlevel = data.level
	end
end

local function checks(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	if t == 13 then
		if data.hearts < 5 then
			tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
			data.hearts = data.hearts + 1
			sound.play("main:/sound#pickup")
		end
	elseif t == 22 then 
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		data.keys = data.keys + 1
		sound.play("main:/sound#pickup")
	elseif t == 20 then endlevel(self)
	elseif t >= 26 and t <= 29 then
		hurt(self)
	end

	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul == 0 then
			--
		elseif self.invul % 6 < 3 then
			sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
		else
			sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0))
		end
	end

	if self.onground > 0 then self.onground = self.onground - 1 end
		
	if data.hearts == 0 then
		self.lock = INPUT_LOCK
		msg.post("#co", "disable")
		msg.post("gui#gameover", "show")
		particlefx.stop("#dust")
	end
end

local function anim(self)
	if self.ladder and self.move.x == 0 then
		if math.abs(self.move.y) > GRAVITY and self.dir.y ~= self.anim.y then
			msg.post("#sprite", "play_animation", {id = hash("climb")})
			self.anim.y = self.dir.y
		elseif math.abs(self.move.y) <= GRAVITY then
			msg.post("#sprite", "play_animation", {id = hash("static_climb")})
			self.anim = vmath.vector3(0,0,0)
		end
	elseif self.onground == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	elseif self.move.x ~= 0 and self.dir.x ~= self.anim.x then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", true)
			self.anim.x = -1
		else
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", false)
			self.anim.x = 1
		end
	elseif self.move.x == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	end
end

local function dust(self)
	if self.onground > 0 and not self.dust and self.move.x ~= 0 then
		self.dust = true
		particlefx.play("#dust")
	elseif (self.onground == 0 and self.dust) or self.move.x == 0 then
		self.dust = false
		particlefx.stop("#dust")
	end
end

local function ladder(self)
	local pos = go.get_position()
	pos.y = pos.y - 7.9
	pos = data.world2tile(pos)
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	if t == 97 then
		if self.move.y < 0 then
			self.move.y = 0
			self.onground = ONGROUND
			self.ladder = true
		end
	else self.ladder = false
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		drag(self)
		gravity(self)
		checks(self)
		anim(self)
		dust(self)
		ladder(self)
	end

	self.correction = vmath.vector3()
	if self.lock > 0 then self.lock = self.lock - 1 end
end

local function jump(self)
	if self.onground > 0 then
		self.move.y = JUMP
		self.onground = 0
		sound.play("main:/sound#jump", {gain = 0.4})
	end
end

local function throw(self)
	if data.rocks > 0 then
		local move = vmath.vector3(self.dir)
		local pos = go.get_position()

		move.x = move.x * SHOT_SPEED
		move.y = math.abs(move.x / 4)
		
		factory.create("#rock_factory", pos, nil, {vel = move})
		sound.play("main:/sound#throw")

		data.rocks = data.rocks - 1
	else
		sound.play("main:/sound#no", {gain = 0.5})
	end
end

local function exitgame(self)
	msg.post("main:/sound", "stop_sound", {})
	msg.post("main:/handler", "show_menu")
end

local function input_playing (self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
		self.dir.x = 1
	elseif action_id == hash("up") then
		if self.ladder then
			self.move.y = self.move.y + ACCEL
			if self.move.y > LADDER_SPEED then self.move.y = LADDER_SPEED end
			self.dir.y = 1
		end
	elseif action_id == hash("down") then
		if self.ladder then
			self.move.y = self.move.y - ACCEL
			if self.move.y < LADDER_SPEED then self.move.y = -LADDER_SPEED end
			self.dir.y = -1
		end
	elseif action_id == hash("action") and action.pressed then
		jump(self)
	elseif action_id == hash("throw") and action.pressed then
		throw(self, action)
	elseif action_id == hash("exit") and action.pressed then
		exitgame(self)
	end
end

local function input_gameover(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("throw")) and action.pressed then
		exitgame(self)
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return end
	
	if data.state == data.STATE_PLAYING then
		input_playing (self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
			
			if math.abs(message.normal.x) > 0.5 then self.move.x = 0 end
			if message.normal.y > 0.5 then
				if self.move.y < -2 then sound.play("main:/sound#land", {gain=0.4}) end
				self.move.y = 0
				self.onground = ONGROUND
			elseif message.normal.y == -1 then
				self.move.y = -BOUNCE
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("contact_point_response") then
		if message.other_group == hash("enemy") or message.other_group == hash("spore") then
			hurt(self)
		else
			collision(self, message)
		end
	end
end
