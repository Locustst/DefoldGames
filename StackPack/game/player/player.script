local data = require "main.data"

local SPEED = 0.75

function init(self)
	self.box = 0
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
	self.dir = vmath.vector3(SPEED,0,0)
	self.anim = vmath.vector3()
	self.flash = 100
	msg.post(".", "acquire_input_focus")
	sound.play("main:/sound#music")
	msg.post("view#game", "status", {text = "MOVE THE RED CRATE TO THE RED BAY"})
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function move(self)
	local pos = go.get_position() + self.move
	go.set_position(pos)
	data.playerpos = pos
	if self.move ~= vmath.vector3(0,0,0) then self.dir = self.move
	end
end

local function drop(self, pos, id)
	tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 20)
	tilemap.set_tile("/level#tilemap", "control", pos.x, pos.y, id)
	sound.play("main:/sound#drop")
	self.box = 0
	local i = id - 8

	data.crates[i] = data.crates[i] + 1
	if data.crates[1] >= data.cratestotal[1] and data.crates[2] >= data.cratestotal[2] and data.crates[3] >= data.cratestotal[3] then
		msg.post("#sprite", "disable")
		msg.post("view#complete", "show")
	end
end

local function pick(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	local c = tilemap.get_tile("/level#tilemap", "control", pos.x, pos.y)

	if c >=3 and c <= 5 and self.box == 0 then
		tilemap.set_tile("/level#tilemap", "control", pos.x, pos.y, 0)
		sound.play("main:/sound#pickup")
		self.box = c-2
	end

	if t == 17 and self.box == 1 then drop(self, pos, 9)
	elseif t == 18 and self.box == 2 then drop(self, pos, 10)
	elseif t == 19 and self.box == 3 then drop(self, pos, 11)
	elseif t >= 17 and t <= 19 and self.box > 0 then
		msg.post("view#game", "status", {text = "DROP CRATES ON SAME COLOURED BAYS"})
	end
end

local function anim(self)
	if self.move ~= vmath.vector3(0,0,0) and self.anim ~= self.move then
		if self.move.x > 0 then msg.post("#sprite", "play_animation", {id = hash("walk-right")})
		elseif self.move.x < 0 then msg.post("#sprite", "play_animation", {id = hash("walk-left")})
		elseif self.move.y > 0 then msg.post("#sprite", "play_animation", {id = hash("walk-up")})
		elseif self.move.y < 0 then msg.post("#sprite", "play_animation", {id = hash("walk-down")})
		end
		self.anim = vmath.vector3(self.move)
	elseif self.anim ~= self.move then
		if self.anim.x > 0 then msg.post("#sprite", "play_animation", {id = hash("static-right")})
		elseif self.anim.x < 0 then msg.post("#sprite", "play_animation", {id = hash("static-left")})
		elseif self.anim.y > 0 then msg.post("#sprite", "play_animation", {id = hash("static-up")})
		elseif self.anim.y < 0 then msg.post("#sprite", "play_animation", {id = hash("static-down")})
		end
		self.anim = vmath.vector3(self.move)
	end
end

local function box(self)
	msg.post("#box-n", "disable")
	msg.post("#box-e", "disable")
	msg.post("#box-s", "disable")
	msg.post("#box-w", "disable")

	if self.box > 0 then
		local anim = "box-"..tostring(self.box)
		if self.dir.x > 0 then
			msg.post("#box-e", "enable")
			sprite.play_flipbook("#box-e", anim)
		elseif self.dir.x < 0 then
			msg.post("#box-w", "enable")
			sprite.play_flipbook("#box-w", anim)
		elseif self.dir.y > 0 then
			msg.post("#box-n", "enable")
			sprite.play_flipbook("#box-n", anim)
		elseif self.dir.y < 0 then
			msg.post("#box-s", "enable")
			sprite.play_flipbook("#box-s", anim)
		end
	end
end

local function flash(self)
	if self.flash > 0 then
		self.flash = self.flash - 1
		if self.flash == 0 then
			--
		elseif self.flash % 10 < 5 then sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
		else sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0))
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		pick(self)
		anim(self)
		flash(self)
		box(self)
	end
	
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
end

local function box2belt(self, pos)
	factory.create("#box-factory", data.tile2world(pos) + vmath.vector3(0,5,0), nil, {color = self.box})
	sound.play("main:/sound#drop")
	self.box = 0
end

local function belt(self)
	local pos = go.get_position()
	pos = data.world2tile(pos)
	local left = tilemap.get_tile("/level#tilemap", "control", pos.x-1, pos.y)
	local right = tilemap.get_tile("/level#tilemap", "control", pos.x+1, pos.y)
	
	if left >= 161 and left <= 164 then
		pos.x = pos.x - 1
		box2belt(self, pos)
	elseif right >= 166 and right <= 169 then
		pos.x = pos.x + 1
		box2belt(self, pos)
	end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("contact_point_response") then
		if message.other_group == hash("world") then
			collision(self, message)
		elseif message.other_group == hash("fence") and self.box ~= 0 then
			collision(self, message)
			msg.post("view#game", "status", {text = "CRATES CANNOT PASS THROUGH THE ELECTRIC FENCE"})
		elseif message.other_group == hash("belt") then
			collision(self, message)
			if self.box ~= 0 then belt(self)
			end
		end
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("down") then
		self.move.y = -SPEED
	elseif action_id == hash("up") then
		self.move.y = SPEED
	elseif action_id == hash("left") then
		self.move.x = -SPEED
	elseif action_id == hash("right") then
		self.move.x = SPEED
	elseif action_id == hash("exit") and action.pressed then
		msg.post("main:/sound", "stop_sound")
		msg.post("main:/handler", "show_menu")
	elseif action_id == hash("reload") and action.pressed then
		msg.post("game:/loader", "reload_level")
	elseif action_id == hash("debug") and action.pressed then
		--data.crates[1] = data.cratestotal[1]
		--data.crates[2] = data.cratestotal[2]
		--data.crates[3] = data.cratestotal[3]
	end
end

local function input_clear(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("exit")) and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_CLEAR then
		input_clear(self, action_id, action)
	end
end
