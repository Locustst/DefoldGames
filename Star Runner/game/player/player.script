local data = require "main.data"

local DRAG = 10
local ACCEL = 30
local SPEED_MAX = 72
local ONGROUND = 8
local MIN = -240
local JUMP = 180
local FLOAT = 7
local GRAV = 12
local BOUNCE = 12
local DEAD_TIME = 100
local INVUL = 100
local LOCK = 0.35

local function invul(self)
	self.invul = INVUL
end

function init(self)
	self.snap = true
	self.time = 0
	self.lock = 0
	self.pickup = 0
	self.invul = INVUL
	self.onground = ONGROUND
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
	self.dir = vmath.vector3(1,0,0)
	self.anim = vmath.vector3()
	msg.post(".", "acquire_input_focus")
	data.state = data.STATE_PLAYING
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function restart(self)
	msg.post("game:/loader", "reload_level")
end

local function dead(self)
	data.state = data.STATE_DEAD
	msg.post("#co", "disable")
	particlefx.stop("#dust")
	local pos = go.get_position()
	pos.z = 0.8
	go.set_position(pos)
	self.move.x = self.dir.x
	self.move.y = JUMP
end

local function move(self, dt)
	local move = self.move * data.capdelta(dt)
	move.z = 0
	local pos = go.get_position() + move
	go.set_position(pos)
	data.playerpos = pos
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function grav(self)
	self.move.y = self.move.y - GRAV
	if self.move.y < MIN then self.move.y = MIN end
end

local function jump(self)
	if self.onground > 0 then
		self.move.y = JUMP
		sound.play("main:/sound#jump")
	end
end

local function anim(self)
	if self.onground == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	elseif self.move.x ~= 0 and self.dir.x ~= self.anim.x then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", true)
			self.anim.x = -1
		else
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", false)
			self.anim.x = 1
		end
	elseif self.move.x == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	end
end

local function respawn(self)
	msg.post("/effect", "disintegrate", {pos = go.get_position()})
	local pos = data.spawnpos
	pos.x = pos.x - (pos.x % data.TILE_SIZE) + (data.TILE_SIZE / 2)
	pos.y = pos.y - (pos.y % data.TILE_SIZE) + (data.TILE_SIZE / 2)
	go.set_position(pos)
	self.move = vmath.vector3()
	if pos.y % data.SCR_H < 16 then self.move.y = JUMP end
	self.lock = LOCK
	sound.play("main:/sound#hit")
	invul(self)
end

local function contact(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t >= 16 and t <= 30 then
		if self.pickup == 0 and t ~= data.item then
			if data.item == 16 then data.item = 0 end
			tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, data.item)
			data.item = t
			sound.play("main:/sound#bong")
			msg.post("view#game", "status", {text = "PICKED UP "..data.itemname[t]})
		end
		self.pickup = 2
	elseif t >= 137 and t <= 150 then
		local item = t - 120
		if item == data.item then
			tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, t + 15)
			sound.play("main:/sound#pew")
			msg.post("view#game", "status", {text = "YOU USED "..data.itemname[t-120]})
			msg.post("#item", "use", {item = data.item})
			data.item = 16
		else
			msg.post("view#game", "status", {text = "YOU NEED "..data.itemname[t-120]})
		end
	elseif (t >= 166 and t <= 167) or (t >= 189 and t <= 192)then
		respawn(self)
	end
end

local function dust(self)
	if self.onground > 0 and not self.dust and self.move.x ~= 0 then
		self.dust = true
		particlefx.play("#dust")
	elseif (self.onground == 0 and self.dust) or self.move.x == 0 then
		self.dust = false
		particlefx.stop("#dust")
	end
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul == 0 then
			msg.post("#co", "enable")
		elseif self.invul % 6 < 3 then
			msg.post("#sprite", "enable")
		else
			msg.post("#sprite", "disable")
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self, dt)
		dust(self)
		drag(self)
		grav(self)
		anim(self)
		contact(self)
		flash(self)
		if self.onground > 0 then self.onground = self.onground - 1 end
		if self.pickup > 0 then self.pickup = self.pickup - 1 end
		if data.rods >= 4 then
			msg.post("view#complete", "show")
			self.lock = 1
		end
		self.correction = vmath.vector3()
	end
	if self.lock > 0 then self.lock = self.lock - dt end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp

			if math.abs(message.normal.x) == 1 then self.move.x = 0 end
			if message.normal.y > 0.5 then
				if self.move.y < -200 then sound.play("main:/sound#land", {gain = 0.4}) end
				self.move.y = 0
				self.onground = ONGROUND
			elseif message.normal.y < -0.8 then
				self.move.y = -BOUNCE
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
		data.spawnpos = message.pos
	elseif message_id == hash("move") then
		local pos = go.get_position()
		pos = pos + message.move
		go.set_position(pos)
	elseif message_id == hash("contact_point_response") and data.state == data.STATE_PLAYING then
		if message.other_group == hash("lift") then self.move.y = self.move.y + FLOAT
		elseif message.other_group == hash("enemy") and self.invul == 0 then respawn(self)
		else collision(self, message)
		end
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		if data.deadzone(action.value) then
			self.move.x = self.move.x - (action.value * ACCEL)
			if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
			self.dir.x = -1
		end
	elseif action_id == hash("right") then
		if data.deadzone(action.value) then
			self.move.x = self.move.x + (action.value * ACCEL)
			if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
			self.dir.x = 1
		end
	elseif action_id == hash("action") and action.pressed then
		jump(self, action)
	elseif action_id == hash("map") and action.pressed then
		msg.post("view#map", "show")
	elseif action_id == hash("exit") and action.pressed then
		quit2menu(self)
	end
end

local function input_map(self, action_id, action)
	if action_id == hash("map") and action.pressed then
		msg.post("view#map", "hide")
	end
end
	
local function input_complete(self, action_id, action)
	if action_id == hash("action") then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return end
	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_MAP then
		input_map(self, action_id, action)
	elseif data.state == data.STATE_COMPLETE then
		input_complete(self, action_id, action)
	end
end


