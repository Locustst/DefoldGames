local data = require "main.data"

local DRAG = 6
local ACCEL = 9
local SPEED_MAX = 72
local PUSH_MAX = 24
local ONGROUND = 5
local MIN = -240
local JUMP = 180
local GRAV = 12
local BOOST = 8.4
local BOUNCE = 12
local DEAD_TIME = 100

function init(self)
	self.snap = true
	self.time = 0
	self.onground = ONGROUND
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
	self.dir = vmath.vector3(1,0,0)
	self.anim = vmath.vector3(0,0,0)
	msg.post(".", "acquire_input_focus")
	sound.play("main:/sound#chirp")
	sound.play("main:/sound#rads", {gain = 0})
	data.rads = 0
	data.state = data.STATE_PLAYING
end

local function quit2menu(self)
	if data.level > data.maxlevel then data.maxlevel = data.level end
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function restart(self)
	msg.post("game:/loader", "reload_level")
end

local function dead(self)
	data.state = data.STATE_DEAD
	msg.post("#co", "disable")
	particlefx.stop("#dust")
	local pos = go.get_position()
	pos.z = 0.8
	go.set_position(pos)
	self.move.x = self.dir.x
	self.move.y = JUMP
end
	
local function move(self, dt)
	local move = self.move * dt
	move.z = 0
	local pos = go.get_position() + move
	go.set_position(pos)
	data.playerpos = pos
end

local function cam(self)
	if self.snap then
		msg.post("view#script", "snap_to", {position = go.get_position()})
		self.snap = false
	else	
		msg.post("view#script", "look_at", {position = go.get_position()})
	end
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function grav(self)
	self.move.y = self.move.y - GRAV
	if self.move.y < MIN then self.move.y = MIN end
end

local function jump(self, action)
	if action.pressed then
		if self.onground > 0 then self.move.y = JUMP end
		sound.play("main:/sound#jump", {gain = 0.4})
	elseif self.onground == 0 then self.move.y = self.move.y + BOOST
	end
end

local function anim(self)
	if self.onground == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	elseif self.move.x ~= 0 and self.dir.x ~= self.anim.x then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", true)
			self.anim.x = -1
		else
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", false)
			self.anim.x = 1
		end
	elseif self.move.x == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	end
end

local function levelclear(self)
	data.level = data.level + 1
	if data.level > data.MAX_LEVELS then
		particlefx.stop("#dust")
		self.move.x = 0
		anim(self)
		msg.post("view#complete", "show")
	else
		data.maxlevel = data.level
		msg.post("game:/loader", "new_level")
		data.savegamefile()
	end
	data.state = data.STATE_LEVELCLEAR
end

local function cond(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t == 4 then
		levelclear(self)
	elseif t == 2 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		data.frags = data.frags + 1
		sound.play("main:/sound#pickup")
		msg.post("view#game", "status", {text = "FRAGMENT COLLECTED!"})
	elseif t >= 12 and t <= 16 then
		data.rads = data.rads + 5
	end

	data.rads = data.rads + 0.01

	if data.rads > 100 then
		data.rads = 100
		sound.play("main:/sound#dead")
		dead(self)
	end
end

local function dust(self)
	if self.onground > 0 and not self.dust and self.move.x ~= 0 then
		self.dust = true
		particlefx.play("#dust")
	elseif (self.onground == 0 and self.dust) or self.move.x == 0 then
		self.dust = false
		particlefx.stop("#dust")
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self, dt)
		dust(self)
		cam(self)
		drag(self)
		grav(self)
		anim(self)
		cond(self)
	elseif data.state == data.STATE_DEAD then
		move(self, dt)
		grav(self)
		go.set_rotation(vmath.quat_rotation_z(self.time/5))
		self.time = self.time + 1
		if self.time >= DEAD_TIME then
			restart(self)
		end
	end

	local vol = ((data.rads - 50) / 100)
	if vol < 0 then vol = 0 end
	sound.set_gain("main:/sound#rads", vol)
	
	if self.onground > 0 then self.onground = self.onground - 1 end
	self.correction = vmath.vector3()
end

local function collision(self, message)
	if message.distance > 0 then
		if message.other_group == hash("block") and math.abs(message.normal.x) == 1 and message.distance < 1.5 then
			if self.move.x > PUSH_MAX then self.move.x = PUSH_MAX
			elseif self.move.x < -PUSH_MAX then self.move.x = -PUSH_MAX
			end
			return
		end

		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp

			if math.abs(message.normal.x) == 1 then self.move.x = 0 end
			if message.normal.y > 0.5 then
				if self.move.y < -120 then sound.play("main:/sound#land", {gain=0.4}) end
				self.move.y = 0
				self.onground = ONGROUND
			elseif message.normal.y < -0.8 then
				self.move.y = -BOUNCE
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("dead") then
		dead(self)
	elseif message_id == hash("contact_point_response") then
		collision(self, message)
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
		self.dir.x = 1
	elseif action_id == hash("action") then
		jump(self, action)
	elseif action_id == hash("exit") and action.pressed then
		msg.post("main:/sound", "stop_sound")
		msg.post("main:/handler", "show_menu")
	elseif action_id == hash("reload") and action.pressed then
		restart(self)
	elseif action_id == hash("debug") and action.pressed then
		--levelclear(self)
	end
end

local function input_complete(self, action_id, action)
	if action_id == hash("action") then
		data.maxlevel = 1
		data.level = 1
		data.savegamefile()
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_COMPLETE then
		input_complete(self, action_id, action)
	end
end
