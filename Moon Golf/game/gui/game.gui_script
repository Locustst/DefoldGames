local data = require "main.data"

local function disablenode (self, node)
	gui.set_enabled(node, false)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	if not data.tutorial then disablenode(self, gui.get_node("tutorial")) end
end

function update(self, dt)
	gui.set_text(gui.get_node("score"), data.score)
	gui.set_text(gui.get_node("holescore"), string.format("(+%d)", data.holescore))

	local text = string.format("%d   %d   %d   %d   %d   %d   %d   %d   %d",
		data.card[1], data.card[2], data.card[3],data.card[4], data.card[5], data.card[6],data.card[7], data.card[8], data.card[9])

	gui.set_text(gui.get_node("card"), text)

	local node = gui.get_node("restart")
	local color = vmath.vector4(1,1,1,1)
	if data.holescore == 0 or data.state ~= data.STATE_PLAYING then color.w = 0 end
	gui.animate(node, gui.PROP_COLOR, color, gui.EASING_LINEAR, 0.1)

	node = gui.get_node("wait")
	color = vmath.vector4(1,1,1,1)
	if data.state ~= data.STATE_WAITING then color.w = 0 end
	gui.animate(node, gui.PROP_COLOR, color, gui.EASING_LINEAR, 0.1)
end

function on_input(self, action_id, action)
	if action_id == hash("action") and action.pressed and data.tutorial then
		gui.animate(gui.get_node("tutorial"), gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 0.25, 0, disablenode)
		data.tutorial = false
	end
	
	if data.state ~= data.STATE_CLEAR then
		if action_id == hash("action") and action.pressed then
			if gui.pick_node(gui.get_node("restart"), action.x, action.y) then
				if data.holescore > 0 then msg.post("/common/player", "restart") end
				return
			end
		end
	end

	if data.state == data.STATE_CLEAR then msg.post("#clear", "input", {action_id = action_id, action = action})
	else msg.post("/common/player", "input", {action_id = action_id, action = action})
	end
end


