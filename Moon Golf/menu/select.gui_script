local data = require "main.data"

local function disablenode (self, node)
	gui.set_enabled(node, false)
end

local function show(self)
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(data.SCR_W/2, data.SCR_H/2, 0), gui.EASING_INOUTQUAD, 0.25)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,1), gui.EASING_INOUTQUAD, 0.25)
	data.state = data.STATE_SELECT
end

local function hide(self)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(data.SCR_W/2, (data.SCR_H/2) - data.GUI_DROP, 0), gui.EASING_INOUTQUAD, 0.25, 0, disablenode)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INOUTQUAD, 0.25)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.node = gui.get_node("container")
	gui.set_position(self.node, vmath.vector3(data.SCR_W/2, (data.SCR_H/2) - data.GUI_DROP, 0))
	gui.set_enabled(self.node, false)
	gui.set_color(self.node, vmath.vector4(1,1,1,0))
end

local function startgame(self)
	data.hole = 1
	data.score = 0
	data.holescore = 0
	data.card = {0,0,0,0,0,0,0,0,0}
	data.starttime = os.clock()
	data.state = data.STATE_PLAYING
	sound.play("main:/sound#hit")
	msg.post("main:/handler", "show_game")
end	

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(self)
	end
end

local function goback(self)
	hide(self)
	msg.post("#menu", "show", {})
	sound.play("main:/sound#hit")
end

function on_input(self, action_id, action)
	if data.state == data.STATE_SELECT then
		if action_id == hash("exit") and action.pressed then
			goback(self)
		elseif action_id == hash("action") and action.pressed then
			if gui.pick_node(gui.get_node("back"), action.x, action.y) then
				goback(self)
			else
				for n = 1, 3 do
					if gui.pick_node(gui.get_node(tostring(n)), action.x, action.y) and action.pressed then
						data.level = n
						startgame(self)
					end
				end
			end
		end
	end
end

