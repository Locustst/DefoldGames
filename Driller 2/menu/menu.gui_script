local data = require "main.data"

function init(self)
	msg.post(".", "acquire_input_focus")
	self.node = gui.get_node("container")
	self.handpos = 2
	self.lock = 0
	self.rad = 0
	self.arrowpos = {
		gui.get_position(gui.get_node("1")),
		gui.get_position(gui.get_node("2")),
		gui.get_position(gui.get_node("3")),
		gui.get_position(gui.get_node("4"))
	}
	if data.maxlevel > 1 then gui.set_text(gui.get_node("2"), string.format("CONTINUE (%d)", data.maxlevel)) end
	gui.set_text(gui.get_node("best"), string.format("BEST SCORE: %05d", data.best)) 
	sound.play("main:/sound#music")
	data.state = data.STATE_MENU
end

local function startgame(self)
	data.score = 0
	data.level = data.maxlevel
	data.state = data.STATE_PLAYING
	msg.post("main:/handler", "show_game")
	sound.stop("main:/sound")
	sound.play("main:/sound#music2")
end	

local function show(self)
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(640, 360, 0), gui.EASING_INOUTQUAD, 0.25)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,1), gui.EASING_INOUTQUAD, 0.25)
	data.state = data.STATE_MENU
end

local function hide(self)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(640, 300, 0), gui.EASING_INOUTQUAD, 0.25, 0, disablenode)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INOUTQUAD, 0.25)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(self)
	end
end

function update(self, dt)
	if data.state == data.STATE_MENU then
		if self.lock > 0 then self.lock = self.lock - 1 end
	end

	local str = ""
	local tag = ""
	if data.mode == 1 then
		str = "MODE: EASY"
		tag = "REGENERATE WHEN DOCKED"
	elseif data.mode == 2 then
		str = "MODE: NORMAL"
		tag = "BALANCED GAMEPLAY"
	else
		str = "MODE: HARD"
		tag = "NO DRILL RETRACTON"
	end

	gui.set_text(gui.get_node("1"), str)
	gui.set_text(gui.get_node("tag"), tag)

	local ease = math.sin(self.rad) * 12
	local pos = vmath.vector3(self.arrowpos[self.handpos].x - 48 + ease, self.arrowpos[self.handpos].y + 1, 0)
	gui.set_position(gui.get_node("arrow"), pos)
	self.rad = self.rad + 0.05
end

local function controls(self)
	hide(self)
	msg.post("#controls", "show", {})
end

local function credits(self)
	hide(self)
	msg.post("#credits", "show", {})
end

function on_input(self, action_id, action)
	if data.state == data.STATE_MENU and self.lock == 0 then
		if action_id == hash("up") and action.pressed then
			self.handpos = self.handpos - 1
			if self.handpos < 1 then self.handpos = 4 end
			sound.play("main:/sound#tick")
		elseif action_id == hash("down") and action.pressed then
			self.handpos = self.handpos + 1
			if self.handpos > 4 then self.handpos = 1 end
			sound.play("main:/sound#tick")
		elseif action_id == hash("action") and action.pressed then
			if self.handpos == 1 then
				data.mode = data.mode + 1
				if data.mode > 3 then data.mode = 1 end
				sound.play("main:/sound#tick")
			elseif self.handpos == 2 then
				startgame(self)
				sound.play("main:/sound#tick")
			elseif self.handpos == 3 then
				controls(self)
				sound.play("main:/sound#tick")
			elseif self.handpos == 4 then
				credits(self)
				sound.play("main:/sound#tick")
			end
		elseif action_id == hash("exit") and action.pressed then
			msg.post("@system:", "exit", {code = 0})
		end
	end
end



