local data = require "main.data"

local GRAV = 0.1
local THRUST = 0.2
local MAX = 2.0
local MIN = -2.0
local HOMEX = 100
local FLY = 0
local WALK = 1
local ONGROUND = 5
local DRAIN = 0.05
local LOCK = 40
local INVUL = 100
local MAX_VOL = 0.5

local function invulnerable(self)
	self.invul = INVUL
end	

function init(self)
	self.snap = true
	self.jet = 0
	self.anim = FLY
	self.onground = 0
	self.vol = 0
	self.lock = LOCK
	self.invul = INVUL
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
	data.scrollpos = vmath.vector3()
	data.fuel = 100
	data.coins = 0
	data.state = data.STATE_PLAYING
	msg.post(".", "acquire_input_focus")
	msg.post("view#script", "snap_to", {position = vmath.vector3(0, 0, 0)})
	sound.play("main:/sound#thrust", {gain = 0.0})
end

local function quit2menu(self)
	if data.level > data.maxlevel then data.maxlevel = data.level end
	if data.score > data.bestscore then data.bestscore = data.score end
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function levelclear(self)
	if data.level < data.MAX_LEVELS then msg.post("view#clear", "show")
	else msg.post("view#complete", "show")
	end

	sound.play("main:/sound#clear")
	self.lock = LOCK
end

local function gameover(self)
	msg.post("#sprite", "disable")
	msg.post("#co", "disable")
	msg.post("view#gameover", "show")
	sound.stop("main:/sound#music")
	sound.play("main:/sound#gameover")
	self.lock = LOCK
end

local function move(self)
	local pos = go.get_position()
	pos = pos + self.move
	pos.x = pos.x + 1
	if pos.x < data.scrollpos.x + HOMEX then pos.x = pos.x + 0.25 end
	go.set_position(pos)
end

local function grav(self)
	self.move.y = self.move.y - GRAV
	if self.move.y < MIN then self.move.y = MIN end
end

local function jet(self)
	if self.jet == 1 then particlefx.stop("#jet") end
end

local function anim(self)
	if self.onground == ONGROUND and self.anim == FLY then
		msg.post("#sprite", "play_animation", {id = hash("walk")})
		go.set_rotation(vmath.quat_rotation_z(0))
		self.anim = WALK
	elseif self.onground <= 0 and self.anim == WALK then
		msg.post("#sprite", "play_animation", {id = hash("fly")})
		go.set_rotation(vmath.quat_rotation_z(-0.2))
		self.anim = FLY
	end
end

local function pickup(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y, 0)

	if t == 3 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#coin")
		data.coins = data.coins + 1
	elseif t == 4 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#fuel")
		data.fuel = data.fuel + 25
		if data.fuel > 100 then data.fuel = 100 end
	elseif t == 17 or t == 18 then
		levelclear(self)
	end
end

local function hurt(self)
	if self.invul > 0 then return end
	if data.hp > 0 then data.hp = data.hp - 1 end
	sound.play("main:/sound#hit")
	invulnerable(self)
end

local function hazard(self)
	if self.invul > 0 then return end
	
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y, 0)

	if t == 7 then
		self.move.y = MIN
		hurt(self)
	elseif t == 8 then
		self.move.y = MAX
		hurt(self)
	end
end

local function vol(self)
	if self.jet > 0 then
		if self.vol < MAX_VOL then
			self.vol = self.vol + 0.25
		end
	elseif self.vol > 0 then
		self.vol = self.vol - 0.1
	end

	sound.set_gain("main:/sound#thrust", self.vol)
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul == 0 then
			--
		elseif self.invul % 6 < 3 then
			msg.post("#sprite", "enable")
		else
			msg.post("#sprite", "disable")
		end
	end
end

local function cond(self)
	if data.hp <= 0 then
		gameover(self)
	end

	local pos = go.get_position()
	if pos.x - data.scrollpos.x <-10 then
		gameover(self)
	end
end

function update(self, dt)
	move(self)
	grav(self)
	anim(self)
	jet(self)
	vol(self)

	if data.state == data.STATE_PLAYING then
		pickup(self)
		hazard(self)
		flash(self)
		cond(self)
	end
	
	self.jet = self.jet - 1
	self.onground = self.onground - 1
	self.lock = self.lock - 1
	self.correction = vmath.vector3()
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp

			if math.abs(message.normal.y) == 1 then self.move.y = 0 end
			if message.normal.y > 0.5 then self.onground = ONGROUND end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("contact_point_response") then
		if message.other_group == hash("enemy") then hurt(self)
		else collision(self, message)
		end
	end
end

local function thrust(self)
	if data.fuel <= 0 then return end
	self.move.y = self.move.y + THRUST
	if self.move.y > MAX then self.move.y = MAX end
	if self.jet ~= 1 then particlefx.play("#jet") end
	self.jet = 2
	data.fuel = data.fuel - DRAIN
end

local function input_playing(self, action_id, action)
	if action_id == hash("action") then
		thrust(self)
	elseif action_id == hash("debug") then
		--levelclear(self)
	elseif action_id == hash("exit") then
		--quit2menu(self)
	end
end

local function input_levelclear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		if data.level > data.MAX_LEVELS then
			data.maxlevel = 1
			data.level = 1
			quit2menu(self)
		else
			msg.post("game:/loader", "new_level", {})
		end
	end
end

local function input_gameover(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return end
	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
		input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end
